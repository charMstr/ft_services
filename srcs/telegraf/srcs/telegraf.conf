# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]

# Configuration for telegraf agent
[agent]
	## Default data collection interval for all inputs
	interval = "5s"
	## Rounds collection interval to 'interval'
	## ie, if interval="10s" then always collect on :00, :10, :20, etc.
	round_interval = true

	## Telegraf will send metrics to outputs in batches of at most
	## metric_batch_size metrics.
	## This controls the size of writes that Telegraf sends to output plugins.
	metric_batch_size = 1000

	## For failed writes, telegraf will cache metric_buffer_limit metrics for each
	## output, and will flush this buffer on a successful write. Oldest metrics
	## are dropped first when this buffer fills.
	## This buffer only fills when writes fail to output plugin(s).
	metric_buffer_limit = 10000

	## Collection jitter is used to jitter the collection by a random amount.
	## Each plugin will sleep for a random time within jitter before collecting.
	## This can be used to avoid many plugins querying things like sysfs at the
	## same time, which can have a measurable effect on the system.
	collection_jitter = "0s"

	## Default flushing interval for all outputs. Maximum flush_interval will be
	## flush_interval + flush_jitter
	flush_interval = "10s"
	## Jitter the flush interval by a random amount. This is primarily to avoid
	## large write spikes for users running a large number of telegraf instances.
	## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
	flush_jitter = "0s"

	## By default or when set to "0s", precision will be set to the same
	## timestamp order as the collection interval, with the maximum being 1s.
	##   ie, when interval = "10s", precision will be "1s"
	##       when interval = "250ms", precision will be "1ms"
	## Precision will NOT be used for service inputs. It is up to each individual
	## service input to set the timestamp at the appropriate precision.
	## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
	precision = ""

	## Logging configuration:
	## Run telegraf with debug log messages.
	debug = ${__LOGS_WITH_DEBUG__}
	## Run telegraf in quiet mode (error log messages only).
	quiet = false
	## Specify the log file name. The empty string means to log to stderr.
	logfile = ""

	## Override default hostname, if empty use os.Hostname()
	hostname = ""
	## If set to true, do no set the "host" tag in the telegraf agent.
	omit_hostname = true

#THIS IS FOR MY LOGS
[[outputs.file]]
      files = ["stdout"] 
      data_format = "influx"
###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
	## The full HTTP or UDP URL for your InfluxDB instance.
	##
	## Multiple URLs can be specified for a single cluster, only ONE of the
	## urls will be written to each interval.
	# urls = ["unix:///var/run/influxdb.sock"]
	# urls = ["udp://127.0.0.1:8089"]
	# urls = ["http://127.0.0.1:8086"]
	urls = ["$__INFLUXDB_URL__"]

	## The target database for metrics; will be created as needed.
	database = "${__INFLUXDB_DB_NAME__}"

	## If true, no CREATE DATABASE queries will be sent.  Set to true when using
	## Telegraf with a user without permissions to create databases or when the
	## database already exists.
	# skip_database_creation = false

	## Name of existing retention policy to write to.  Empty string writes to
	## the default retention policy.  Only takes effect when using HTTP.
	# retention_policy = ""

	## Write consistency (clusters only), can be: "any", "one", "quorum", "all".
	## Only takes effect when using HTTP.
	# write_consistency = "any"

	## Timeout for HTTP messages.
	# timeout = "5s"

	## HTTP Basic Auth
	username = "${__INFLUXDB_DB_USER__}"
	password = "${__INFLUXDB_DB_PASSWORD__}"

	## HTTP User-Agent
	# user_agent = "telegraf"

	## UDP payload size is the maximum packet size to send.
	# udp_payload = 512

	## Optional TLS Config for use on HTTP connections.
	# tls_ca = "/etc/telegraf/ca.pem"
	# tls_cert = "/etc/telegraf/cert.pem"
	# tls_key = "/etc/telegraf/key.pem"
	## Use TLS but skip chain & host verification
	# insecure_skip_verify = false

	## HTTP Proxy override, if unset values the standard proxy environment
	## variables are consulted to determine which proxy, if any, should be used.
	# http_proxy = "http://corporate.proxy:3128"

	## Additional HTTP headers
	# http_headers = {"X-Special-Header" = "Special-Value"}

	## HTTP Content-Encoding for write request body, can be set to "gzip" to
	## compress body or "identity" to apply no encoding.
	# content_encoding = "identity"

	## When true, Telegraf will output unsigned integers as unsigned values,
	## i.e.: "42u".  You will need a version of InfluxDB supporting unsigned
	## integer values.  Enabling this option will result in field type errors if
	## existing data has been written.
	# influx_uint_support = false

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read metrics about cpu usage
[[inputs.cpu]]
	## Whether to report per-cpu stats or not
	percpu = true
	## Whether to report total system cpu stats or not
	totalcpu = true
	## If true, collect raw CPU time metrics.
	collect_cpu_time = false
	## If true, compute and report the sum of all non-idle CPU states.
	report_active = false


# Read metrics about disk usage by mount point
[[inputs.disk]]
	## By default stats will be gathered for all mount points.
	## Set mount_points will restrict the stats to only the specified mount points.
	# mount_points = ["/"]

	## Ignore mount points by filesystem type.
	ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs"]


# Read metrics about disk IO by device
[[inputs.diskio]]
	## By default, telegraf will gather stats for all devices including
	## disk partitions.
	## Setting devices will restrict the stats to the specified devices.
	# devices = ["sda", "sdb", "vd*"]
	## Uncomment the following line if you need disk serial numbers.
	# skip_serial_number = false
	#
	## On systems which support it, device metadata can be added in the form of
	## tags.
	## Currently only Linux is supported via udev properties. You can view
	## available properties for a device by running:
	## 'udevadm info -q property -n /dev/sda'
	# device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
	#
	## Using the same metadata source as device_tags, you can also customize the
	## name of the device via templates.
	## The 'name_templates' parameter is a list of templates to try and apply to
	## the device. The template may contain variables in the form of '$PROPERTY' or
	## '${PROPERTY}'. The first template which does not contain any variables not
	## present for the device is used as the device name tag.
	## The typical use case is for LVM volumes, to get the VG/LV name instead of
	## the near-meaningless DM-0 name.
	# name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]


# Get kernel statistics from /proc/stat
[[inputs.kernel]]
	# no configuration


# Read metrics about memory usage
[[inputs.mem]]
	# no configuration


# Get the number of processes and group them by status
[[inputs.processes]]
	# no configuration


# Read metrics about swap memory usage
[[inputs.swap]]
	# no configuration


# Read metrics about system load & uptime
[[inputs.system]]
	# no configuration

# Collect TCP connections state and UDP socket counts
[[inputs.netstat]]
	# no configuration

# Gather metrics about network interfaces
[[inputs.net]]
	## By default, telegraf gathers stats from any up interface (excluding loopback)
	## Setting interfaces will tell it to gather these explicit interfaces,
	## regardless of status. When specifying an interface, glob-style
	## patterns are also supported.
	##
	# interfaces = ["eth*", "enp0s[0-1]", "lo"]
	##
	## On linux systems telegraf also collects protocol stats.
	## Setting ignore_protocol_stats to true will skip reporting of protocol metrics.
	##
	# ignore_protocol_stats = false
	##

###############################################################################
#                            KUBERNETES PLUGINS                               #
###############################################################################

 # Read metrics from the Kubernetes api
 [[inputs.kube_inventory]]
   ## URL for the Kubernetes API
   #url = "https://127.0.0.1"
   url = "https://kubernetes.default.svc:443/"	

   ## Namespace to use. Set to "" to use all namespaces.
   # namespace = "default"

   ## Use bearer token for authorization. ('bearer_token' takes priority)
   ## If both of these are empty, we'll use the default serviceaccount:
   ## at: /run/secrets/kubernetes.io/serviceaccount/token
   # bearer_token = "/path/to/bearer/token"
   ## OR
   # bearer_token_string = "abc_123"

   ## Set response_timeout (default 5 seconds)
   # response_timeout = "5s"

   ## Optional Resources to exclude from gathering
   ## Leave them with blank with try to gather everything available.
   ## Values can be - "daemonsets", deployments", "endpoints", "ingress", "nodes",
   ## "persistentvolumes", "persistentvolumeclaims", "pods", "services", "statefulsets"
   resource_exclude = [ "" ]

   ## Optional Resources to include when gathering
   ## Overrides resource_exclude if both set.
   resource_include = [ "pods" ]

   ## selectors to include and exclude as tags.  Globs accepted.
   ## Note that an empty array for both will include all selectors as tags
   ## selector_exclude overrides selector_include if both set.
   # selector_include = []
   # selector_exclude = ["*"]

   ## Optional TLS Config
   # tls_ca = "/path/to/cafile"
   # tls_cert = "/path/to/certfile"
   # tls_key = "/path/to/keyfile"
   ## Use TLS but skip chain & host verification
   insecure_skip_verify = true

## Read metrics from the kubernetes kubelet api
#[[inputs.kubernetes]]
#  ## URL for the kubelet
#  #url = "http://127.0.0.1:10255"
   #url = "https://kubernetes.default.svc:10255/"	
#
#  ## Use bearer token for authorization. ('bearer_token' takes priority)
#  ## If both of these are empty, we'll use the default serviceaccount:
#  ## at: /run/secrets/kubernetes.io/serviceaccount/token
#  # bearer_token = "/path/to/bearer/token"
#  ## OR
#  # bearer_token_string = "abc_123"
#
#  ## Pod labels to be added as tags.  An empty array for both include and
#  ## exclude will include all labels.
#  # label_include = []
#  # label_exclude = ["*"]
#
#  ## Set response_timeout (default 5 seconds)
#  # response_timeout = "5s"
#
#  ## Optional TLS Config
#  # tls_ca = /path/to/cafile
#  # tls_cert = /path/to/certfile
#  # tls_key = /path/to/keyfile
#  ## Use TLS but skip chain & host verification
  #insecure_skip_verify = true

